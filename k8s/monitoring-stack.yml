---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: default
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s

    scrape_configs:
      - job_name: 'backend'
        static_configs:
          - targets: ['backend:3000']
      - job_name: 'kube-state-metrics'
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names: ['kube-system']     # ou o namespace onde instalou
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: kube-state-metrics
      metrics_path: /metrics
      scheme: http
      - job_name: 'node-exporter'
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names: ['default']
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          regex: node-exporter
          action: keep
      metrics_path: /metrics
      scheme: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: default
data:
  config.yml: |-
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki.default.svc.cluster.local:3100/loki/api/v1/push
        backoff_config:
          min_period: 500ms
          max_period: 5s
        batchsize: 102400
        batchwait: 1s

    scrape_configs:
      - job_name: kubernetes-logs-containers
        static_configs:
          - targets: ['localhost']
            labels:
              job: kube-logs-containers
              __path__: /var/log/containers/*_default_*.log
        #pipeline_stages:
        #  - cri: {}

      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        pipeline_stages:
          - cri: {}
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_pod_name, __meta_kubernetes_pod_container_name]
            target_label: __path__
            regex: '(.+);(.+)'
            replacement: '/var/log/pods/${1}_${2}/0.log'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  labels:
    app: loki
  namespace: default
data:
  local-config.yaml: |-
    auth_enabled: false

    server:
      http_listen_port: 3100
      grpc_listen_port: 9096

    ingester:
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1

    storage_config:
      boltdb:
        directory: /loki/index

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    compactor:
      working_directory: /loki/compactor

    limits_config:
      ingestion_rate_mb: 10
      ingestion_burst_size_mb: 20
      allow_structured_metadata: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus/
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          securityContext:
            runAsUser: 0
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
        - name: loki
          image: grafana/loki
          args: ["-config.file=/etc/loki/local-config.yaml"]
          securityContext:
            runAsUser: 0
          ports:
            - containerPort: 3100
          volumeMounts:
            - name: loki-config-volume
              mountPath: /etc/loki/
      volumes:
        - name: loki-config-volume
          configMap:
            name: loki-config
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 3100
      targetPort: 3100
    - name: grpc
      protocol: TCP
      port: 9096
      targetPort: 9096
  selector:
    app: loki
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: default
  labels:
    app: promtail
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      serviceAccountName: promtail-sa
      volumes:
        - name: config
          configMap:
            name: promtail-config
        - name: containers
          hostPath:
            path: /var/log/containers
            type: Directory
        - name: pods
          hostPath:
            path: /var/log/pods
            type: Directory
        - name: positions
          emptyDir: {}
      containers:
        - name: promtail
          image: grafana/promtail:3.1.1
          args:
            - -config.file=/etc/promtail/config.yml
            - -log.level=debug
          volumeMounts:
            - name: config
              mountPath: /etc/promtail
            - name: containers
              mountPath: /var/log/containers
              readOnly: true
            - name: pods
              mountPath: /var/log/pods
              readOnly: true
            - name: positions
              mountPath: /tmp
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promtail
subjects:
  - kind: ServiceAccount
    name: promtail-sa
    namespace: default
